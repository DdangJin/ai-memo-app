# 📝 PRD: **Memora** – AI 음성 메모장 웹서비스

---

## Overview

**Memora**는 AI 기반 웹 메모 애플리케이션으로, 사용자의 음성 또는 텍스트 입력을 받아 AI가 자동으로 요약 및 분류해주는 기능을 제공합니다. STT(Speech-to-Text) 기술을 통해 빠른 음성 메모 작성이 가능하며, 모든 데이터는 웹 애플리케이션의 데이터베이스에 저장됩니다.

### 문제 해결
기존 메모 서비스는 사용자의 메모를 단순 저장하는 데 그치는 경우가 많아, 시간이 지날수록 중요한 정보를 찾기 어렵고 효율적인 활용이 어려워집니다. 특히 회의록, 아이디어, 공부 내용 등 다양한 형태의 메모를 빠르게 작성하고 구조화하는 것이 점점 더 중요해지고 있습니다.

### 대상 사용자
- **직장인/프리랜서**: 회의나 작업 중 웹에서 빠르게 메모하고, 자동 정리되길 원함
- **대학생**: 노트북을 통해 수업 내용을 음성/텍스트로 기록하고 정리하길 원함
- **일반 사용자**: 웹에서 손쉽게 일상 메모를 작성하고 필요할 때 검색하길 원함

### 제공 가치
- **AI 요약**: 긴 메모를 간결한 핵심 요약으로 제공
- **카테고리 분류**: 자동 분류 기능을 통한 체계적인 메모 정리
- **STT 기반 음성 입력**: 빠른 음성 기반 메모 작성 가능
- **웹 접근성**: 설치 없이 브라우저에서 사용 가능

---

## Core Features

### 1. 텍스트 메모 작성
- **기능**: 사용자가 직접 웹에서 텍스트 입력하여 메모 작성
- **중요성**: 기본적인 메모 작성 기능으로 모든 사용자가 활용 가능
- **동작 방식**: React 기반 텍스트 에디터를 통한 실시간 메모 작성

### 2. 음성 입력 (STT 변환)
- **기능**: 마이크 입력을 실시간 텍스트로 변환
- **중요성**: 빠른 메모 작성과 접근성을 크게 향상
- **동작 방식**: Web Speech API 또는 외부 STT 서비스 연동

### 3. AI 요약
- **기능**: 긴 메모 내용을 간결하게 요약
- **중요성**: 핵심 정보를 빠르게 파악할 수 있어 메모 활용도 증대
- **동작 방식**: OpenAI API 또는 유사한 AI 서비스를 통한 텍스트 요약

### 4. 자동 카테고리 분류
- **기능**: 메모 내용을 주제 기반으로 자동 분류
- **중요성**: 체계적인 메모 관리와 검색 효율성 증대
- **동작 방식**: AI 기반 텍스트 분류 알고리즘 적용

### 5. 검색 기능
- **기능**: 키워드, 작성일, 카테고리별 검색 가능
- **중요성**: 저장된 메모를 효율적으로 찾아 활용
- **동작 방식**: 클라이언트 사이드 검색과 서버 사이드 검색 조합

### 6. 데이터베이스 저장
- **기능**: 모든 메모는 서버의 DB에 저장
- **중요성**: 데이터 영속성과 동기화 보장
- **동작 방식**: PostgreSQL 또는 MongoDB를 통한 데이터 관리

---

## User Experience

### 사용자 페르소나

#### 1. 직장인 김영희 (35세, 마케팅 매니저)
- **목표**: 회의 중 빠른 메모 작성과 후속 작업 계획 수립
- **페인 포인트**: 긴 회의 내용을 정리하는 시간 부족
- **사용 시나리오**: 회의 중 음성으로 메모 → AI 요약 확인 → 카테고리별 정리

#### 2. 대학생 박민수 (22세, 컴퓨터공학과)
- **목표**: 수업 내용 기록과 시험 준비를 위한 정리
- **페인 포인트**: 필기 속도가 느려 중요한 내용을 놓침
- **사용 시나리오**: 수업 중 음성 녹음 → AI 요약 → 카테고리별 정리

#### 3. 프리랜서 이지은 (28세, 콘텐츠 크리에이터)
- **목표**: 아이디어 발굴과 콘텐츠 기획
- **페인 포인트**: 좋은 아이디어를 놓치거나 정리하지 못함
- **사용 시나리오**: 아이디어 음성 메모 → AI 요약 → 카테고리 분류

### 핵심 사용자 흐름

#### 시나리오 1: 웹에서 회의 내용을 음성으로 메모
1. 사용자가 웹 앱 실행 및 로그인
2. '새 메모' 버튼 클릭 → 음성 녹음 시작
3. STT 기술로 실시간 텍스트 변환
4. 메모 저장 시, 자동으로 AI 요약 및 카테고리 분류
5. 전체 메모와 요약본이 웹 화면에 동시 표시
6. 데이터는 자체 데이터베이스에 저장되어 웹에서 언제든지 확인 가능

#### 시나리오 2: 기존 메모 검색 및 활용
1. 검색창에 키워드 입력
2. 카테고리별 필터링 옵션 선택
3. 검색 결과 목록에서 원하는 메모 선택
4. 메모 상세 보기 및 편집
5. 요약본과 전체 내용 비교 확인

### UI/UX 고려사항
- **반응형 디자인**: 모바일, 태블릿, 데스크톱 모든 환경 지원
- **직관적인 인터페이스**: 최소한의 학습 곡선으로 즉시 사용 가능
- **접근성**: 키보드 네비게이션과 스크린 리더 지원
- **성능 최적화**: 빠른 로딩 시간과 부드러운 사용자 경험

---

## Technical Architecture

### 시스템 구성 요소

#### 1. 프론트엔드 & 백엔드 (Next.js)
- **Next.js 14**: React 프레임워크, SSR/SSG 지원, API Routes
- **TypeScript**: 타입 안정성과 개발 생산성 향상
- **Tailwind CSS**: 반응형 디자인과 스타일링
- **Web Speech API**: 브라우저 내장 음성 인식 기능

#### 2. 데이터베이스
- **Supabase**: PostgreSQL 기반 클라우드 데이터베이스
- **Drizzle ORM**: 타입 안전한 데이터베이스 접근
- **PostgreSQL**: 관계형 데이터베이스

#### 3. AI 서비스
- **Anthropic Claude**: 텍스트 요약 및 분류
- **Web Speech API**: 클라이언트 사이드 STT

### 데이터 모델

#### User 모델
```typescript
interface User {
  id: string;
  email: string;
  name: string;
  createdAt: Date;
  updatedAt: Date;
}
```

#### Memo 모델
```typescript
interface Memo {
  id: string;
  userId: string;
  title: string;
  content: string;
  summary: string;
  category: string;
  tags: string[];
  isVoiceMemo: boolean;
  createdAt: Date;
  updatedAt: Date;
}
```

### API 및 통합

#### RESTful API 엔드포인트
- `POST /api/memos`: 새 메모 생성
- `GET /api/memos`: 메모 목록 조회
- `GET /api/memos/:id`: 특정 메모 조회
- `PUT /api/memos/:id`: 메모 수정
- `DELETE /api/memos/:id`: 메모 삭제
- `POST /api/memos/summarize`: AI 요약 생성
- `POST /api/memos/categorize`: 카테고리 분류

#### 외부 서비스 통합
- **Anthropic Claude API**: 텍스트 요약 및 분류
- **Web Speech API**: 브라우저 내장 음성 인식

### 인프라 요구사항
- **호스팅**: Vercel (프론트엔드 & 백엔드)
- **데이터베이스**: Supabase (PostgreSQL)
- **CDN**: Vercel Edge Network

---

## Development Roadmap

### Phase 1: MVP (Minimum Viable Product)
**목표**: 핵심 기능을 갖춘 기본적인 메모 애플리케이션

#### 기능 요구사항
- [x] 기본 텍스트 메모 작성 및 저장
- [x] 간단한 사용자 인증 (이메일/비밀번호)
- [x] 메모 목록 보기 및 상세 보기
- [x] 기본 검색 기능 (제목, 내용)
- [x] 반응형 웹 디자인
- [x] 데이터베이스 연동

#### 기술 스택
- **프론트엔드 & 백엔드**: Next.js 14, TypeScript, Tailwind CSS
- **데이터베이스**: Supabase, Drizzle ORM
- **인증**: Supabase Auth

### Phase 2: AI 기능 통합
**목표**: AI 기반 요약 및 분류 기능 추가

#### 기능 요구사항
- [ ] OpenAI API 연동
- [ ] 메모 자동 요약 기능
- [ ] 카테고리 자동 분류
- [ ] 요약본과 전체 내용 비교 보기
- [ ] AI 처리 상태 표시

#### 기술 구현
- **AI 서비스**: Anthropic Claude API
- **요약 알고리즘**: 텍스트 요약 및 키워드 추출
- **분류 시스템**: 주제별 자동 카테고리 분류

### Phase 3: 음성 입력 기능
**목표**: STT 기반 음성 메모 작성 기능

#### 기능 요구사항
- [ ] Web Speech API 연동
- [ ] 실시간 음성-텍스트 변환
- [ ] 음성 녹음 컨트롤 (시작/정지/재생)
- [ ] 음성 메모 표시 및 편집
- [ ] 음성 품질 최적화

#### 기술 구현
- **STT**: Web Speech API 또는 Google Speech-to-Text
- **오디오 처리**: Web Audio API
- **실시간 변환**: WebSocket 또는 Server-Sent Events

### Phase 4: 고급 기능 및 최적화
**목표**: 사용자 경험 향상 및 고급 기능 추가

#### 기능 요구사항
- [ ] 고급 검색 (태그, 날짜 범위, 카테고리)
- [ ] 메모 공유 및 협업 기능
- [ ] 사용자 통계 및 분석
- [ ] 데이터 내보내기/가져오기
- [ ] 성능 최적화 및 캐싱

#### 기술 구현
- **검색 엔진**: Supabase Full-text Search
- **실시간 기능**: Supabase Realtime
- **캐싱**: Vercel Edge Cache

---

## Logical Dependency Chain

### 1단계: 기반 시스템 구축 (Foundation)
1. **프로젝트 초기화**: Next.js 프로젝트 설정, TypeScript 구성
2. **데이터베이스 설계**: PostgreSQL 스키마 설계, Prisma 설정
3. **기본 인증 시스템**: JWT 기반 사용자 인증 구현
4. **기본 UI 컴포넌트**: 헤더, 네비게이션, 레이아웃 구성

### 2단계: 핵심 메모 기능 (Core Memo Features)
1. **메모 CRUD**: 생성, 읽기, 수정, 삭제 기능
2. **메모 목록 및 상세 보기**: 메모 목록 페이지와 상세 페이지
3. **기본 검색**: 제목과 내용 기반 검색 기능
4. **반응형 디자인**: 모바일, 태블릿, 데스크톱 지원

### 3단계: AI 기능 통합 (AI Integration)
1. **OpenAI API 연동**: API 키 설정 및 기본 연동
2. **텍스트 요약 기능**: 긴 메모를 간결하게 요약
3. **카테고리 분류**: 메모 내용 기반 자동 분류
4. **AI 처리 상태 관리**: 로딩 상태 및 에러 처리

### 4단계: 음성 입력 기능 (Voice Input)
1. **Web Speech API 연동**: 브라우저 음성 인식 기능
2. **음성 녹음 인터페이스**: 녹음 버튼 및 상태 표시
3. **실시간 변환**: 음성을 텍스트로 실시간 변환
4. **음성 메모 편집**: 변환된 텍스트 편집 기능

### 5단계: 고급 기능 및 최적화 (Advanced Features)
1. **고급 검색**: 태그, 날짜, 카테고리 기반 검색
2. **사용자 통계**: 사용 패턴 분석 및 시각화
3. **성능 최적화**: 캐싱, 코드 분할, 이미지 최적화
4. **배포 및 모니터링**: 프로덕션 배포 및 성능 모니터링

---

## Risks and Mitigations

### 기술적 도전 과제

#### 1. AI API 비용 및 제한
- **위험**: Anthropic Claude API 사용량 증가로 인한 비용 증가
- **완화 방안**: 
  - 사용량 제한 및 모니터링 시스템 구축
  - 캐싱을 통한 중복 요청 방지
  - 대안 AI 서비스 검토 (OpenAI, Gemini 등)

#### 2. 음성 인식 정확도
- **위험**: Web Speech API의 정확도 한계
- **완화 방안**:
  - 사용자 편집 기능 강화
  - 대안 STT 서비스 검토 (Google, Azure 등)
  - 음성 품질 개선 가이드 제공

#### 3. 데이터 보안 및 개인정보
- **위험**: 사용자 메모 데이터 보안 위험
- **완화 방안**:
  - 데이터 암호화 (저장 및 전송)
  - GDPR 준수 및 개인정보 처리방침
  - 정기적인 보안 감사

### MVP 범위 조정

#### 1. 기능 우선순위 조정
- **핵심 기능**: 텍스트 메모, AI 요약, 기본 검색
- **2차 기능**: 음성 입력, 고급 검색, 통계
- **3차 기능**: 협업, 공유, 고급 분석

#### 2. 기술 스택 단순화
- **초기**: Next.js + Supabase + Anthropic Claude
- **확장**: 필요에 따라 추가 서비스 도입

### 리소스 제약

#### 1. 개발 시간 관리
- **위험**: 기능 범위 확장으로 인한 개발 지연
- **완화 방안**:
  - 명확한 MVP 정의 및 범위 제한
  - 주간 스프린트 기반 개발
  - 우선순위 기반 기능 개발

#### 2. 비용 관리
- **위험**: 외부 서비스 비용 증가
- **완화 방안**:
  - 사용량 기반 과금 모델 검토
  - 무료 티어 활용 및 최적화
  - 대안 서비스 검토

---

## Appendix

### 기술 스택 상세

#### 프론트엔드
- **Next.js 14**: React 프레임워크, SSR/SSG 지원
- **TypeScript**: 타입 안정성 및 개발 생산성
- **Tailwind CSS**: 유틸리티 기반 CSS 프레임워크
- **React Hook Form**: 폼 상태 관리
- **React Query**: 서버 상태 관리

#### 백엔드
- **Next.js API Routes**: 서버리스 API 엔드포인트
- **Drizzle ORM**: 타입 안전한 데이터베이스 접근
- **Supabase Auth**: 사용자 인증 및 세션 관리

#### 데이터베이스
- **Supabase**: PostgreSQL 기반 클라우드 데이터베이스
- **PostgreSQL**: 관계형 데이터베이스

#### AI 서비스
- **Anthropic Claude**: 텍스트 요약 및 분류
- **Web Speech API**: 브라우저 내장 STT

### 성능 목표
- **페이지 로딩 시간**: 3초 이내
- **AI 요약 응답 시간**: 10초 이내
- **음성 인식 정확도**: 90% 이상
- **동시 사용자**: 100명 이상 지원

### 보안 요구사항
- **데이터 암호화**: 저장 및 전송 시 AES-256
- **인증**: JWT 기반 세션 관리
- **CORS**: 적절한 Cross-Origin 설정
- **입력 검증**: XSS 및 SQL Injection 방지

### 접근성 요구사항
- **WCAG 2.1 AA**: 웹 접근성 가이드라인 준수
- **키보드 네비게이션**: 마우스 없이도 사용 가능
- **스크린 리더**: 시각 장애인 지원
- **색상 대비**: 충분한 색상 대비 보장